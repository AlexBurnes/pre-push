#!/bin/bash

# Version bump script for pre-push project
# Usage: version-bump <type> [version]
# Types: patch, minor, major, pre, alpha, beta, rc, fix, next, post, feat

set -euo pipefail

# Colors for output
if [[ -t 1 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color
else
    RED='' GREEN='' YELLOW='' BLUE='' NC=''
fi

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show help
show_help() {
    echo "Usage: $0 <type> [version]"
    echo ""
    echo "Types:"
    echo "  patch     - Bug fixes (1.0.0 -> 1.0.1)"
    echo "  minor     - New features (1.0.0 -> 1.1.0)"
    echo "  major     - Breaking changes (1.0.0 -> 2.0.0)"
    echo "  pre       - Pre-release (1.0.0 -> 1.0.0-pre.1)"
    echo "  alpha     - Alpha release (1.0.0 -> 1.0.0-alpha.1)"
    echo "  beta      - Beta release (1.0.0 -> 1.0.0-beta.1)"
    echo "  rc        - Release candidate (1.0.0 -> 1.0.0-rc.1)"
    echo "  fix       - Fix release (1.0.0 -> 1.0.1)"
    echo "  next      - Next version (1.0.0 -> 1.0.1)"
    echo "  post      - Post release (1.0.0 -> 1.0.0-post.1)"
    echo "  feat      - Feature release (1.0.0 -> 1.1.0)"
    echo ""
    echo "Examples:"
    echo "  $0 patch                    # Bump patch version"
    echo "  $0 minor                    # Bump minor version"
    echo "  $0 major                    # Bump major version"
    echo "  $0 patch 1.2.3             # Bump 1.2.3 to 1.2.4"
    echo "  $0 minor 1.2.3             # Bump 1.2.3 to 1.3.0"
}

# Check if version utility is available
check_version_utility() {
    if [[ ! -f "scripts/version" ]]; then
        log_error "Version utility not found at scripts/version"
        log_info "Please run: ./scripts/check-version-status"
        exit 1
    fi
}

# Get current version
get_current_version() {
    if [[ -f "VERSION" ]]; then
        cat VERSION | sed 's/^v//'
    else
        log_error "VERSION file not found"
        exit 1
    fi
}

# Update VERSION file
update_version_file() {
    local new_version="$1"
    local version_with_v="v$new_version"
    
    log_info "Updating VERSION file to $version_with_v"
    echo "$version_with_v" > VERSION
    log_success "VERSION file updated to $version_with_v"
}

# Update Homebrew formula
update_homebrew_formula() {
    local new_version="$1"
    local version_with_v="v$new_version"
    
    log_info "Updating Homebrew formula to version $version_with_v"
    
    # Update the version in the Homebrew formula
    sed -i "s/version \"[^\"]*\"/version \"$version_with_v\"/g" packaging/macos/version.rb
    
    # Update URLs to use the new version - handle both amd64 and arm64 URLs
    sed -i "s|releases/download/v[^/]*/pre-push_[^/]*_macos_amd64|releases/download/$version_with_v/pre-push_${new_version}_macos_amd64|g" packaging/macos/version.rb
    sed -i "s|releases/download/v[^/]*/pre-push_[^/]*_macos_arm64|releases/download/$version_with_v/pre-push_${new_version}_macos_arm64|g" packaging/macos/version.rb
    
    log_success "Homebrew formula updated to version $version_with_v"
}

# Update Scoop manifest
update_scoop_manifest() {
    local new_version="$1"
    local version_with_v="v$new_version"
    
    log_info "Updating Scoop manifest to version $version_with_v"
    
    # Update the version in the Scoop manifest
    sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$version_with_v\"/g" packaging/windows/scoop-bucket/version.json
    
    # Update URLs to use the new version - handle both amd64 and arm64 URLs
    sed -i "s|releases/download/v[^/]*/pre-push_[^/]*_windows_amd64|releases/download/$version_with_v/pre-push_${new_version}_windows_amd64|g" packaging/windows/scoop-bucket/version.json
    sed -i "s|releases/download/v[^/]*/pre-push_[^/]*_windows_arm64|releases/download/$version_with_v/pre-push_${new_version}_windows_arm64|g" packaging/windows/scoop-bucket/version.json
    
    log_success "Scoop manifest updated to version $version_with_v"
}

# Update CHANGELOG.md
update_changelog() {
    local new_version="$1"
    local version_with_v="v$new_version"
    local current_date=$(date +%Y-%m-%d)
    
    log_info "Updating CHANGELOG.md for version $version_with_v"
    
    # Create a temporary file for the new changelog entry
    local temp_changelog=$(mktemp)
    
    # Add the new version entry
    cat > "$temp_changelog" << EOF
## [$new_version] - $current_date

### Added
- **Version $version_with_v**: New release with improvements and bug fixes

EOF
    
    # Add the rest of the changelog (skip the [Unreleased] section header)
    sed -n '/^## \[Unreleased\]/,$p' CHANGELOG.md | tail -n +2 >> "$temp_changelog"
    
    # Replace the original changelog
    mv "$temp_changelog" CHANGELOG.md
    
    log_success "CHANGELOG.md updated for version $version_with_v"
}

# Main function
main() {
    local bump_type="${1:-}"
    local current_version="${2:-}"
    
    # Check for help flag
    if [[ "$bump_type" == "--help" || "$bump_type" == "-h" || "$bump_type" == "help" ]]; then
        show_help
        exit 0
    fi
    
    # Check arguments
    if [[ -z "$bump_type" ]]; then
        log_error "Bump type is required"
        show_help
        exit 1
    fi
    
    # Check if version utility is available
    check_version_utility
    
    # Get current version if not provided
    if [[ -z "$current_version" ]]; then
        current_version=$(get_current_version)
    fi
    
    log_info "Current version: $current_version"
    log_info "Bump type: $bump_type"
    
    # Bump the version using the version utility
    log_info "Bumping version..."
    local new_version
    if [[ -n "${2:-}" ]]; then
        # If current version is provided, use it
        new_version=$(./scripts/version bump "$current_version" "$bump_type")
    else
        # If no current version provided, let the utility detect it
        new_version=$(./scripts/version bump "$bump_type")
    fi
    
    if [[ -z "$new_version" ]]; then
        log_error "Failed to bump version"
        exit 1
    fi
    
    log_success "New version: $new_version"
    
    # Update all files
    update_version_file "$new_version"
    update_homebrew_formula "$new_version"
    update_scoop_manifest "$new_version"
    update_changelog "$new_version"
    
    log_success "Version bump completed successfully!"
    log_info "Updated files:"
    log_info "  - VERSION"
    log_info "  - packaging/macos/version.rb"
    log_info "  - packaging/windows/scoop-bucket/version.json"
    log_info "  - CHANGELOG.md"
    log_info ""
    log_info "Next steps:"
    log_info "  1. Review the changes: git diff"
    log_info "  2. Commit the changes: git add . && git commit -m \"chore(version): bump to $new_version\""
    log_info "  3. Create tag: git tag v$new_version"
    log_info "  4. Push: git push origin master --tags"
}

# Run main function with all arguments
main "$@"