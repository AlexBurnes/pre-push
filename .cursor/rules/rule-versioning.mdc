---
description: Version Management and Workflow Rules for Version CLI Project
globs: 
alwaysApply: true
---
---
rule_type: Always
---
# Version Management & Workflow Rules

## Version Management & Workflow
- **VERSION file**: Single source of truth for version numbers.
- **Pre-push validation**: Automated version checking before git push.
- **Version increment**: Always increment version before making changes.
- **Workflow enforcement**: Follow docs/Developer-workflow.md process.

### Version Change Requirements
- **Before ANY changes**: Check if VERSION file version matches current git tag.
- **If versions match**: Suggest user to increment version first using `scripts/version bump <type>`.
- **Version format**: Must follow `vX.Y.Z` pattern (e.g., `v1.2.3`).
- **Increment types**: `patch` (bug fixes), `minor` (new features), `major` (breaking changes).

### Pre-Change Version Check
```bash
# Check current version status
CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
VERSION_FILE=$(cat VERSION 2>/dev/null || echo "none")

if [[ "$CURRENT_TAG" == "$VERSION_FILE" ]]; then
    echo "‚ö†Ô∏è  VERSION file ($VERSION_FILE) matches current tag ($CURRENT_TAG)"
    echo "üìù Suggestion: Increment version before making changes:"
    echo "   scripts/version bump patch    # for bug fixes"
    echo "   scripts/version bump minor    # for new features" 
    echo "   scripts/version bump major    # for breaking changes"
    echo ""
    echo "Then make your changes and follow the workflow in docs/Developer-workflow.md"
fi
```

### Mandatory Workflow Steps
1. **Check version**: Ensure VERSION file is incremented from last tag
2. **Make changes**: Implement features/fixes
3. **Rebuild binary**: `go build -ldflags "-X main.appVersion=$(cat VERSION)" -o bin/pre-push ./cmd/pre-push`
4. **Test**: Run `go test ./... -v`
5. **Dry run**: `./buildtools/build-goreleaser.sh dry-run`
6. **Commit**: Use conventional commit messages
7. **Tag**: `git tag $(cat VERSION)`
8. **Push**: `git push origin master && git push origin $(cat VERSION)`
9. **Release**: `./buildtools/build-goreleaser.sh release`

## AI Assistant Version Check Protocol

### Before Making ANY Changes
1. **Run version check**: `./scripts/check-version-status`
2. **If version check fails**: Suggest user to increment version first
3. **If version check passes**: Proceed with changes

### Version Check Script Usage
```bash
# Check current version status
./scripts/check-version-status

# If needed, increment version (RECOMMENDED - updates VERSION file and packaging files)
scripts/version-bump-with-file patch    # for bug fixes
scripts/version-bump-with-file minor    # for new features
scripts/version-bump-with-file major    # for breaking changes

# Alternative: manual version bump (requires manual VERSION file update)
scripts/version bump patch    # for bug fixes
scripts/version bump minor    # for new features
scripts/version bump major    # for breaking changes
```

### Packaging File Updates
When version changes, the following files must be updated:
- **VERSION file**: Always updated by `scripts/version-bump-with-file`
- **Windows Scoop config** (`packaging/windows/scoop-bucket/version.json`): Version number and URLs
- **macOS Homebrew formula** (`packaging/macos/version.rb`): URLs in download links
- **GoReleaser configuration** (`.goreleaser.yml`): Uses VERSION file automatically

### Automated Version Bump Workflow
The `scripts/version-bump-with-file` script automatically:
1. **Bumps version** using the version utility
2. **Updates VERSION file** with new version
3. **Updates Windows Scoop config** with new version and URLs
4. **Updates macOS Homebrew formula** with new URLs
5. **Provides next steps** for git operations

### Error Handling
- **VERSION file missing**: Create with current version
- **Version format invalid**: Fix format to `vX.Y.Z`
- **Version matches tag**: Suggest increment before changes
- **Git tag issues**: Help user resolve git state
- **Packaging file updates**: Use `scripts/version-bump-with-file` for automatic updates

## Integration with Git Hooks
- **Pre-push hook**: Automatically validates version before push
- **Version validation**: Ensures version format and increment
- **Tag validation**: Prevents duplicate or invalid tags

## Documentation Requirements
- **docs/Developer-workflow.md**: Complete workflow documentation
- **VERSION file**: Current planned version
- **CHANGELOG.md**: Updated with each release
- **Memory bank**: Updated with version changes

## Changelog Date Requirements
- **For historical versions**: Use git log dates - `git log -1 --format="%ai" <tag>`
- **For current version**: Use terminal date - `date +%Y-%m-%d`
- **Never use placeholder dates**: All dates must be accurate from git history or current system
- **Format dates as**: `YYYY-MM-DD` (e.g., `2025-09-23`)
- **Verify all dates**: Cross-reference with git tag history to ensure accuracy

### Date Commands
```bash
# Get current date for new version
date +%Y-%m-%d

# Get all version dates from git log
git tag --sort=-version:refname | xargs -I {} git log -1 --format="%ai {}" {}

# Get specific version date
git log -1 --format="%ai" v0.8.6
```
