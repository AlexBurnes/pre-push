---
alwaysApply: true
---

# Complete Changes Shortcut Rule

## Rule Description
When the user writes "complete changes" (or variations like "complete", "finish changes", "finalize changes", "finish him"), automatically execute the full release workflow including version bump, documentation updates, git operations, and push.

## Shortcut Variations
- "complete changes"
- "complete"
- "finish changes" 
- "finalize changes"
- "release changes"
- "bump and release"
- "finish him"

## Automatic Workflow
When any of these shortcuts are detected, automatically execute:

1. **Check current version status**
   ```bash
   ./scripts/check-version-status
   ```

2. **Bump version** (choose appropriate type based on changes)
   ```bash
scripts/version-bump-with-file patch    # for bug fixes (updates VERSION file and packaging files)
scripts/version-bump-with-file minor    # for new features (updates VERSION file and packaging files)
scripts/version-bump-with-file major    # for breaking changes (updates VERSION file and packaging files)
   ```

3. **Build using buildfab action** (verbose is default)
   ```bash
./bin/buildfab action install-binary
   ```

4. **Get current date for changelog**
   ```bash
date +%Y-%m-%d
   ```

5. **Update memory bank documents**
   - `activeContext.md` - Add recent changes and current work focus
   - `progress.md` - Update what works and current status

6. **Update documentation**
   - `README.md` - Update version badge and release info
   - `CHANGELOG.md` - Add new version entry with changes
   - **Use correct dates**: Historical versions from git log, current version from terminal

7. **Git operations**
   - Stage all changes: `git add .`
   - Commit with proper format: `git commit -m "type(scope): vX.Y.Z, brief description" -m "changes details"`
   - Create tag: `git tag vX.Y.Z`
   - Push with tag: `git push origin master --tags`
   - **NEVER** push with flag --no-verify
   - **If push fails**: Fix project issues, commit fixes, delete failed tag, retag, and push again

8. **Release** (optional)
   ```bash
./buildtools/build-goreleaser.sh release
   ```

## Commit Format
Follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:
```
type(scope): vX.Y.Z, brief description

changes details

footer information optional
```

Examples:
- `fix(executor): v0.1.2, fix DAG executor streaming output implementation`
  `Updated Buildfab execution to properly handle streaming output with immediate result display`
- `feat(ui): v0.2.0, add new UI features`
  `Added new UI components and enhanced user experience with improved navigation`
- `chore(docs): v0.1.3, update documentation`
  `Updated README.md and CHANGELOG.md with latest features and installation instructions`

## Version Bump Logic
- **patch**: Bug fixes, small improvements
- **minor**: New features, enhancements
- **major**: Breaking changes, major rewrites

## Changelog Date Requirements
- **For historical versions**: Use git log dates - `git log -1 --format="%ai" <tag>`
- **For current version**: Use terminal date - `date +%Y-%m-%d`
- **Never use placeholder dates**: All dates must be accurate from git history or current system
- **Format dates as**: `YYYY-MM-DD` (e.g., `2025-09-23`)
- **Verify all dates**: Cross-reference with git tag history to ensure accuracy

## Error Handling
- If version check fails, suggest user to increment version first
- If git operations fail, provide specific error messages
- If documentation is missing required updates, prompt for completion
- If push with tag fails, follow push failure recovery process

## Push Failure Recovery Process
If `git push origin master --tags` fails due to project issues:

1. **Fix project issues**
   - Address any failing tests, linting errors, or build failures
   - Make necessary code/documentation fixes

2. **Commit fixes**
   ```bash
   git add .
   git commit -m "fix: resolve push failure issues"
   ```

3. **Delete failed tag**
   ```bash
   git tag -d vX.Y.Z
   ```

4. **Retag with same version**
   ```bash
   git tag vX.Y.Z
   ```

5. **Push again**
   ```bash
   git push origin master --tags
   ```

## Integration
This rule works with:
- `rule-versioning.mdc` - Version management
- `rule-git-operations.mdc` - Git workflow
- `rule-changelog.mdc` - Changelog management
- `rule-documents.mdc` - Documentation updates

## Usage Examples
User input: "complete changes"
AI response: Automatically executes full release workflow

User input: "complete"
AI response: Automatically executes full release workflow

User input: "finish changes"
AI response: Automatically executes full release workflow
