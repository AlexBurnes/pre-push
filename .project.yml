project:
  name: "buildfab-pre-push"
  modules: ["pre-push"]
  bin: "bin"

include:
  - "config/update-checking-stages.yml"
  - "config/update-checking-actions.yml"

stages:
  pre-push:
    steps:
      - action: version-check
      - action: version-greatest

      # Always run version module validation
      - action: version-module

      - action: test-variables

      # Run tests after version module validation
      - action: run-tests
        only: [release]
        require: [version-module]

      # Run Git checks for all versions      
      - action: git-untracked
      - action: git-uncommitted
      - action: git-modified
        onerror: warn

  build:
    steps:
      - action: pre-check
      - action: install-conan-deps
        require: [pre-check]
      - action: configure-cmake
        require: [install-conan-deps]
      - action: build-binaries
        require: [configure-cmake]
      - action: install-binary
        require: [build-binaries]
      - action: run-tests
        require: [install-binary]
      - action: create-installers
        require: [install-binary]
      - action: goreleaser-dry-run
        require: [create-installers, pre-check]

  release:
    steps:
      - action: pre-check
      - action: install-conan-deps
        require: [pre-check]
      - action: configure-cmake
        require: [install-conan-deps]
      - action: build-all-platforms
        require: [configure-cmake]
      - action: install-binary
        require: [build-all-platforms]
      - action: run-tests
        require: [install-binary]
      - action: create-installers
        require: [install-binary]
      - action: goreleaser-release
        require: [create-installers, pre-check]

actions:
  # Version and validation actions
  - name: version-check
    run: scripts/version check

  - name: version-greatest
    run: scripts/version check-greatest

  - name: version-module
    run: |
      echo "check project ${{project}} modules versions on os ${{os}}.${{os_version}}"
      for module in $(scripts/version modules); do
        echo "Checking module: bin/$module"
        module_version=$(bin/$module -V 2>/dev/null || echo "")
        if [ -z "$module_version" ]; then
          echo "Could not get version from bin/$module -V"
          exit 1
        fi
        # Strip 'v' prefix from module version for comparison
        module_version_clean=$(echo "$module_version" | sed 's/^v//')
        # Get expected version directly from scripts/version
        expected_version=$(scripts/version version)
        if [ "$module_version_clean" != "$expected_version" ]; then
          echo "Version mismatch: bin/$module reports $module_version, expected $expected_version"
          echo "To check manually run: bin/$module -V"
          exit 1
        fi
        echo "✓ bin/$module version matches: $module_version"
      done

  - name: run-tests
    run: go test ./... -v -race

  - name: test-variables
    run: |
      echo "version ${{version.version}}"
      echo "raw version ${{version.rawversion}}"

  # Git actions
  - name: git-untracked
    uses: git@untracked

  - name: git-uncommitted
    uses: git@uncommitted

  - name: git-modified
    uses: git@modified

  # Pre-check stage action
  - name: pre-check
    run: buildfab run pre-check

  # Dependency installation actions
  - name: install-conan-deps
    run: |
      # Check for golang package in Conan
      if ! conan search golang --remote=all 2>/dev/null | grep -q "golang/"; then
        echo "Creating golang package locally..."
        conan create conanfile-golang.py --build=missing
      fi
      conan install . --build=missing --profile=default

  # Build actions
  - name: configure-cmake
    run: |
      # Configure CMake with Conan preset
      mkdir -p .build
      # Try to use Conan preset first (CMake 3.23+)
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Using Conan CMake preset"
        cmake --preset conan-release
      else
        echo "Using manual CMake configuration"
        cmake -B .build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/usr/local" -G "Unix Makefiles"
      fi

  - name: build-binaries
    run: |
      # Build for current platform
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Building with CMake preset"
        cmake --build --preset conan-release --target pre-push
      else
        echo "Building with manual configuration"
        cmake --build .build --target pre-push
      fi

  - name: install-binary
    run: |
      # Install binary to project bin directory using CMake
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Installing with CMake preset"
        cmake --build --preset conan-release --target install-current
      else
        echo "Installing with manual configuration"
        cmake --build .build --target install-current
      fi
      
      # Verify installation
      if [ -f "bin/pre-push" ]; then
        echo "✓ Binary installed successfully: bin/pre-push"
        bin/pre-push --version
      else
        echo "✗ Binary installation failed"
        exit 1
      fi

  - name: build-all-platforms
    run: |
      # Build for all platforms
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Building with CMake preset"
        cmake --build --preset conan-release --target pre-push-all
      else
        echo "Building with manual configuration"
        cmake --build .build --target pre-push-all
      fi

  - name: build-cross-platform-binaries
    run: |
      # Build cross-platform binaries for testing
      echo "Building cross-platform binaries for testing..."
      
      # Build Linux AMD64
      echo "Building Linux AMD64..."
      GOOS=linux GOARCH=amd64 go build -o bin/pre-push-linux-amd64 ./cmd/pre-push
      
      # Build Windows AMD64
      echo "Building Windows AMD64..."
      GOOS=windows GOARCH=amd64 go build -o bin/pre-push-windows-amd64.exe ./cmd/pre-push
      
      # Build macOS AMD64
      echo "Building macOS AMD64..."
      GOOS=darwin GOARCH=amd64 go build -o bin/pre-push-darwin-amd64 ./cmd/pre-push
      
      echo "✓ Cross-platform binaries built successfully"

  # Installer creation actions
  - name: create-installers
    run: |
      # Create install scripts
      ./buildtools/create-all-installers.sh "$(scripts/version version)" "installers"

  # GoReleaser actions
  - name: goreleaser-dry-run
    run: |
      export PATH="$(go env GOPATH)/bin:$PATH"
      goreleaser release --snapshot --skip-publish --clean

  - name: goreleaser-release
    run: |
      export PATH="$(go env GOPATH)/bin:$PATH"
      goreleaser release --clean
